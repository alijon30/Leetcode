Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false


class Stack:
    def __init__(self):
        self.items = []

    def push(self, value):
        self.items.append(value)

    def isEmpty(self):
        return self.items == []

    def pop(self):
        return self.items.pop()
def helper(a, b):
    if a == "(" and b == ")":
        return True
    elif a == "{" and b == "}":
        return True
    elif a == "[" and b == "]":
        return True
    else:
        return False
class Solution:
    def isValid(self, s):
        stack = Stack()
        lst = []
        pointer = True
        index = 0
        while index < len(s) and pointer:
            paren = s[index]
            if paren in "[({":
                stack.push(paren)
            else:
                if stack.isEmpty():
                    pointer = False
                    break
                else:
                    top = stack.pop()
                    if not helper(top, paren):
                        pointer = False
                        break
            index += 1
        if pointer and stack.isEmpty():
            return True
        else:
            return False
